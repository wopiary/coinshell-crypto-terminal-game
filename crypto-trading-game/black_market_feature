import os
import time
import random
import string

user_wallet = {
    'balance': 1000.00
}
black_market_page_product_category = [
    "Crypto Exchange",
    "Compromised Coinshell Accounts",
    "Misc. Black Market Goods"
]
bag_black_market = {
      'crypto_coin' : []
}
def black_market_page_generate_key(length =6):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))


def black_market_page():
    os.system('cls' if os.name == 'nt' else 'clear')

    
    
#     # # Spooky loading effect
#     # print("    🌐 Initiating secure connection to darknet terminal...")
#     # time.sleep(2)
#     # os.system('cls' if os.name == 'nt' else 'clear') 
#     # print("    🔐 Authenticating user credentials...")
#     # time.sleep(2)
#     # os.system('cls' if os.name == 'nt' else 'clear')
#     # print("    👁️  Synchronizing with decentralized nodes...")
#     # time.sleep(1.5)
#     # os.system('cls' if os.name == 'nt' else 'clear')

#     # print("    ⚡ Connection established. Welcome to the Market!")
#     # time.sleep(2)
#     # os.system('cls' if os.name == 'nt' else 'clear')


    session_code_first_num = random.randint(1,9)
    session_code_second_num = random.randint(10,99)
    session_code_letters = ''.join(random.choices(string.ascii_uppercase, k=3))
    account_num = random.randint(1000,9999)

    access_keys = {black_market_page_generate_key(): category for category in black_market_page_product_category}

    print(f"""
⠀⠀⠀
            ⠀⠀⠀⠀⠀⠀⠀⢠⢤⣠⣶⣿⣿⡿⠿⠛⠛⠛⠛⠉⠛⠛⠛⠛⠿⣷⡦⠞⣩⣶⣸⡆⠀⠀⠀⠀⠀⠀⠀
            ⠀⠀⠀⠀⠀⠀⣠⣾⡤⣌⠙⠻⣅⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠔⠋⢀⣾⣿⣿⠃⣇⠀⠀⠀⠀⠀⠀⠀
            ⠀⠀⠀⠀⣠⣾⣿⡟⢇⢻⣧⠄⠀⠈⢓⡢⠴⠒⠒⠒⠒⡲⠚⠁⠀⠐⣪⣿⣿⡿⡄⣿⣷⡄⠀⠀⠀⠀⠀
            ⠀⠀⠀⣠⣿⣿⠟⠁⠸⡼⣿⡂⠀⠀⠈⠁⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠉⠹⣿⣧⢳⡏⠹⣷⡄⠀⠀⠀⠀
            ⠀⠀⣰⣿⡿⠃⠀⠀⠀⢧⠑⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⠇⡸⠀⠀⠘⢿⣦⣄⠀⠀
            ⠀⢰⣿⣿⠃⠀⠀⠀⠀⡼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡠⠀⠀⠀⠀⠀⠀⠰⡇⠀⠀⠀⠈⣿⣿⣆⠀
            ⠀⣿⣿⡇⠀⠀⠀⠀⢰⠇⠀⢺⡇⣄⠀⠀⠀⠀⣤⣶⣀⣿⠃⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠀⠸⣿⣿⡀
            ⢸⣿⣿⠀⠀⠀⠀⠀⢽⠀⢀⡈⠉⢁⣀⣀⠀⠀⠀⠉⣉⠁⠀⠀⠀⣀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⣿⣿⡇
            ⢸⣿⡟⠀⠀⠀⠠⠀⠈⢧⡀⠀⠀⠀⠹⠁⠀⠀⠀⠀⠀⠀⠠⢀⠀⠀⠀⠀⠀⢼⠁⠀⠀⠀⠀⠀⢹⣿⡇
            ⢸⣿⣿⠀⠀⠀⠀⠀⠠⠀⠙⢦⣀⠠⠊⠉⠂⠄⠀⠀⠀⠈⠀⠀⠀⣀⣤⣤⡾⠘⡆⠀⠀⠀⠀⠀⣾⣿⡇
            ⠘⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⢠⠜⠳⣤⡀⠀⠀⣀⣤⡤⣶⣾⣿⣿⣿⠟⠁⠀⠀⡸⢦⣄⠀⠀⢀⣿⣿⠇
            ⠀⢿⣿⣧⠀⠀⠀⠀⠀⣠⣤⠞⠀⠀⠀⠙⠁⠙⠉⠀⠀⠸⣛⡿⠉⠀⠀⠀⢀⡜⠀⠀⠈⠙⠢⣼⣿⡿⠀
            ⠀⠈⣿⣿⣆⠀⠀⢰⠋⠡⡇⠀⡀⣀⣤⢢⣤⣤⣀⠀⠀⣾⠟⠀⠀⠀⠀⢀⠎⠀⠀⠀⠀⠀⣰⣿⣿⠁⠀
      ⠀⠀⠀
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
     ████  SILK CLAW MARKETPLACE v3.1  ████   [SECURE NODE: ACTIVE]
 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      Session: #{session_code_letters}{session_code_first_num}-{session_code_second_num} │ Encrypted Route: ONION://v3
      Account: ANON-{account_num} │ Clearance Level: OMEGA | Inventory: {bag_black_market['crypto_coin']}
──────────────────────────────────────────────────────────────────────
      """)
    
    for key, section in access_keys.items():
      print(f"?  {key}   – {section}")

    black_market_page_choice = input("""
Enter Access Key to Proceed:
""")
    
    if black_market_page_choice in access_keys:
        section = access_keys[black_market_page_choice]
        print(f"\n[ACCESS GRANTED] Redirecting to {section}...\n")

    if section == 'Crypto Exchange':
        black_market_page_crypto_coin()

    elif section =='Exit Silk Claw':
         return 'back'
        
    else:
        print("\n[ACCESS DENIED] Invalid key. Disconnecting...\n")
        time.sleep(1.5)



def black_market_page_crypto_coin():
            os.system('cls' if os.name=='nt' else 'clear')
            global  bm_crypto_exchange_page_coin_prices
            bm_crypto_exchange_page_coin_names = [
            "🕱 Shadowcoin (SHC)",
            "⚓ Dreadnaught (DNT)",
            "🐍 Chimera (CMR)",
            "✴ Aetherium (AET)",
            "🌑 Aphelion (APH)"
        ]
            bm_crypto_exchange_page_coin_prices = [random.uniform(5000,99999) for _ in range(6)]
            bm_crypto_exchange_page_coin_value = [random.uniform(-99999,99999) for _ in range(6)]
            print(f"""
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[CRYPTO EXCHANGE NODE] — SILK CLAW MARKETPLACE v3.1
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Status: ACTIVE │ Wallet Integration: ENABLED │ Escrow: SECURED
Wallet: ${user_wallet['balance']:.2f}        | Inventory: {bag_black_market['crypto_coin']}
──────────────────────────────────────────────────────────────────────
 ID   │ ITEM/DESCRIPTION                  │ PURCHASE VALUE
──────┼───────────────────────────────────┼───────────────────────────
 001  │ 🕱 Shadowcoin (SHC)                │ ${bm_crypto_exchange_page_coin_prices[0]:.2f}
 002  │ ⚓ Dreadnaught (DNT)              │ ${bm_crypto_exchange_page_coin_prices[1]:.2f}
 003  │ 🐍 Chimera (CMR)                  │ ${bm_crypto_exchange_page_coin_prices[2]:.2f}
 004  │ ✴ Aetherium (AET)                 │ ${bm_crypto_exchange_page_coin_prices[3]:.2f}
 005  │ 🌑 Aphelion (APH)                 │ ${bm_crypto_exchange_page_coin_prices[4]:.2f}
──────────────────────────────────────────────────────────────────────
[1] Purchase Coin
[2] Dump Coin
[3] Return to Access Gate """)  
            print("""━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━""")
            black_market_page_crypto_coin_user_input = input('Enter your choice:')
            if not black_market_page_crypto_coin_user_input:
                   black_market_page_crypto_coin()
            if black_market_page_crypto_coin_user_input == '1':
                 black_market_page_crypto_coin_purchase_coin_page()

def black_market_page_crypto_coin_purchase_coin_page():
            os.system('cls' if os.name=='nt' else 'clear')
            print(f"""
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[CRYPTO EXCHANGE || PURCHASE NODE] — SILK CLAW MARKETPLACE v3.1
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Status: ACTIVE │ Wallet Integration: ENABLED │ Escrow: SECURED
Wallet: ${user_wallet['balance']:.2f}        | Inventory: {bag_black_market['crypto_coin']}
──────────────────────────────────────────────────────────────────────
 ID   │ ITEM/DESCRIPTION                  │ PURCHASE VALUE
──────┼───────────────────────────────────┼───────────────────────────
 001  │ 🕱 Shadowcoin (SHC)                │ ${bm_crypto_exchange_page_coin_prices[0]:.2f}
 002  │ ⚓ Dreadnaught (DNT)              │ ${bm_crypto_exchange_page_coin_prices[1]:.2f}
 003  │ 🐍 Chimera (CMR)                  │ ${bm_crypto_exchange_page_coin_prices[2]:.2f}
 004  │ ✴ Aetherium (AET)                 │ ${bm_crypto_exchange_page_coin_prices[3]:.2f}
 005  │ 🌑 Aphelion (APH)                 │ ${bm_crypto_exchange_page_coin_prices[4]:.2f}
──────────────────────────────────────────────────────────────────────
""")


            print("""
██████████████████████████████████████████████████████████████████████
█                                                                    █
█  ⬛ SILK CLAW SECURE TRANSACTION PROTOCOL ⬛                        █
█                                                                    █  
█  [ENCRYPTED] TOR://v3.onion/secure-payment                         █
█  [STATUS] AUTHENTICATED | ESCROW ENABLED | SSL 256-BIT             █
████████████████████████████████████████████████████████████████████ █
█                                                                    █
█  ⚠️  ENTER TRANSACTION DETAILS - ALL DATA IS ENCRYPTED  ⚠️        █
█                                                                    █
██████████████████████████████████████████████████████████████████████
""")
            black_market_page_crypto_coin_purchase_coin_page_receipt_coinname = input('[INPUT] ⬛ TARGET ASSET ID: ')
            if len(black_market_page_crypto_coin_purchase_coin_page_receipt_coinname.strip()) == 0:
                        black_market_page_crypto_coin_purchase_coin_page()
            black_market_page_crypto_coin_purchase_coin_page_receipt_coinquantity = int(input('[INPUT] 📦 QUANTITY UNITS: '))
            if len(black_market_page_crypto_coin_purchase_coin_page_receipt_coinname.strip()) == 0:
                        black_market_page_crypto_coin_purchase_coin_page()
            black_market_page_crypto_coin_purchase_coin_page_receipt_coinnconfirmation= input('[CONFIRM] ✅ AUTHORIZE TRANSACTION (Y/N): ')

            if black_market_page_crypto_coin_purchase_coin_page_receipt_coinnconfirmation == 'y':
                if black_market_page_crypto_coin_purchase_coin_page_receipt_coinname == '001':
                    total = bm_crypto_exchange_page_coin_prices[0] * black_market_page_crypto_coin_purchase_coin_page_receipt_coinquantity
                    black_market_page_crypto_coin_purchase_coin_page_receipt_coinname_purchased = '🕱 Shadowcoin (SHC)'
                elif black_market_page_crypto_coin_purchase_coin_page_receipt_coinname == '002':
                    total = bm_crypto_exchange_page_coin_prices[0] * black_market_page_crypto_coin_purchase_coin_page_receipt_coinquantity
                    black_market_page_crypto_coin_purchase_coin_page_receipt_coinname_purchased = '⚓ Dreadnaught (DNT)'
                elif black_market_page_crypto_coin_purchase_coin_page_receipt_coinname == '003':
                    total = bm_crypto_exchange_page_coin_prices[0] * black_market_page_crypto_coin_purchase_coin_page_receipt_coinquantity
                    black_market_page_crypto_coin_purchase_coin_page_receipt_coinname_purchased = '🐍 Chimera (CMR)'
                elif black_market_page_crypto_coin_purchase_coin_page_receipt_coinname == '004':
                    total = bm_crypto_exchange_page_coin_prices[0] * black_market_page_crypto_coin_purchase_coin_page_receipt_coinquantity
                    black_market_page_crypto_coin_purchase_coin_page_receipt_coinname_purchased = '✴ Aetherium (AET)'
                elif black_market_page_crypto_coin_purchase_coin_page_receipt_coinname == '005':
                    total = bm_crypto_exchange_page_coin_prices[0] * black_market_page_crypto_coin_purchase_coin_page_receipt_coinquantity
                    black_market_page_crypto_coin_purchase_coin_page_receipt_coinname_purchased = '🌑 Aphelion (APH)'
                else:
                    print('❌ Product Unavailable!')
                    return  black_market_page_crypto_coin_purchase_coin_page()
                    
                    
black_market_page()
